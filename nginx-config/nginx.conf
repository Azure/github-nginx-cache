user nginx;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Configures default error logger.
error_log /var/log/nginx/error.log warn;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;

events {
  # The maximum number of simultaneous connections that can be opened by
  # a worker process.
  worker_connections 1024;
}

http {
  # Includes mapping of file name extensions to MIME types of responses
  # and defines the default type.
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  # Don't tell nginx version to clients.
  server_tokens off;

  # Specifies the maximum accepted body size of a client request, as
  # indicated by the request header Content-Length. If the stated content
  # length is greater than this size, then the client receives the HTTP
  # error code 413. Set to 0 to disable.
  client_max_body_size 1m;

  # Timeout for keep-alive connections. Server will close connections after
  # this time.
  keepalive_timeout 65;

  # Sendfile copies data between one FD and other from within the kernel,
  # which is more efficient than read() + write().
  sendfile on;

  # Don't buffer data-sends (disable Nagle algorithm).
  # Good for sending frequent small bursts of data in real time.
  tcp_nodelay on;

  # Specifies that our cipher suits should be preferred over client ciphers.
  ssl_prefer_server_ciphers on;

  # Enables a shared SSL cache with size that can hold around 8000 sessions.
  ssl_session_cache shared:SSL:2m;

  # Set the Vary HTTP header as defined in the RFC 2616.
  gzip_vary on;


  # Specifies the main log format
  log_format access '$remote_addr - $remote_user [$time_local] "$request" '
      '$status $body_bytes_sent "$http_referer" '
      '"$http_user_agent" "$http_x_forwarded_for"';
  # Specifies the main log location
  access_log /var/log/nginx/access.log access;

  # logs proxy pass information
  log_format upstreamlog '[$time_local] $remote_addr - $remote_user - $server_name to: $upstream_addr: $request upstream_response_time $upstream_response_time msec $msec request_time $request_time';
  # Specifies the upstream log location
  access_log /var/log/nginx/upstream.log upstreamlog;

  # Specifies the cache_status log format.
  log_format cache_status '[$time_local] "$request" $upstream_cache_status';
  # Specifies the cache_status log location
  access_log /var/log/nginx/cache_access.log cache_status;

  # location and settings
  proxy_cache_path /mnt/github-nginx-cache use_temp_path=off levels=1:2 keys_zone=cache_zone:200m max_size=200g inactive=1y;

  log_format json_combined escape=json
    '{'
      '"time_local":"$time_local",'
      '"remote_addr":"$remote_addr",'
      '"request_method":"$request_method",'
      '"request_uri":"$request_uri",'
      '"status": "$status",'
      '"body_bytes_sent":"$body_bytes_sent",'
      '"request_time":"$request_time",'
      '"http_referrer":"$http_referer",'
      '"upstream_addr":"$upstream_addr",'
      '"upstream_response_time":"$upstream_response_time",'
      '"msec":"$msec",'
      '"upstream_http_x_ratelimit_limit":"$upstream_http_x_ratelimit_limit",'
      '"upstream_http_x_ratelimit_remaining":"$upstream_http_x_ratelimit_remaining",'
      '"upstream_http_x_ratelimit_reset":"$upstream_http_x_ratelimit_reset",'
      '"upstream_http_retry_after":"$upstream_http_retry_after",'
      '"request_to_proxy":"$request_to_proxy$is_args$args",'
      '"http_x_cache_key":"$http_x_cache_key",'
      '"downstream_url":"$downstream_url",'
      '"upstream_status":"$upstream_status",'
      '"upstream_bytes_received":"$upstream_bytes_received",'
      '"upstream_bytes_sent":"$upstream_bytes_sent",'
      '"upstream_cache_status":"$upstream_cache_status",'
      '"request_body":"$request_body",'
      '"http_user_agent":"$http_user_agent"'
    '}';
    
  access_log /dev/stdout json_combined;
  error_log /dev/stderr warn;

  server {
    resolver 8.8.8.8;
    listen 80;
    server_name _;
    client_max_body_size 1G;

    location / {
        return 200 'This is a caching service for github:  https://github.com/Azure/github-nginx-cache/';
        add_header Content-Type text/plain;
    }

    include health_check.conf;    
    include github-domain-configs/*.conf;
  }

}